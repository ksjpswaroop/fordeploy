services:
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-recruitment}
      POSTGRES_USER: ${POSTGRES_USER:-recruit}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change-me}
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  api:
    build: .
    environment:
      PORT: 8080
      ENVIRONMENT: production
      LOG_LEVEL: info
      SEED_DEMO: 1
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER:-recruit}:${POSTGRES_PASSWORD:-change-me}@db:5432/${POSTGRES_DB:-recruitment}
      SECRET_KEY: ${SECRET_KEY:-please-change}
      CORS_ORIGINS: '*'
      CLERK_PUBLISHABLE_KEY: ${CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      CLERK_JWT_SECRET_BASE64: ${CLERK_JWT_SECRET_BASE64}
      DEV_BEARER_TOKEN: ${DEV_BEARER_TOKEN:-dev-local-token}
      DEV_USER_ROLE: ${DEV_USER_ROLE:-manager}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    command: ["sh","-c","./scripts/prestart.sh && gunicorn -c gunicorn_conf.py app.main:app"]
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    restart: unless-stopped

  web:
    build: ./frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE_URL: /api
      NEXT_PUBLIC_DEV_BEARER: ${DEV_BEARER_TOKEN}
    depends_on:
      - api
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - api
      - web
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped

volumes:
  dbdata:
