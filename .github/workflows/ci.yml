name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black mypy

      - name: Lint (ruff)
        run: |
          ruff --version
          ruff check \
            app/services \
            app/api/routers/bench.py \
            app/api/routers/notifications.py \
            app/api/routers/pipeline.py \
            app/api/routers/health.py \
            app/api/utils/pagination.py \
            app/schemas/notification_api.py \
            app/schemas/pipeline.py

      - name: Format check (black)
        run: |
          black --version
          black --check \
            app/services \
            app/api/routers/bench.py \
            app/api/routers/notifications.py \
            app/api/routers/pipeline.py \
            app/api/routers/health.py \
            app/api/utils/pagination.py \
            app/schemas/notification_api.py \
            app/schemas/pipeline.py

      - name: Type check (mypy)
        run: |
          mypy --version
          mypy \
            app/services \
            app/api/routers/bench.py \
            app/api/routers/notifications.py \
            app/api/routers/pipeline.py \
            app/api/routers/health.py \
            app/api/utils/pagination.py \
            app/schemas/notification_api.py \
            app/schemas/pipeline.py

      - name: Run tests with coverage
        env:
          APIFY_TOKEN: test-token
          CLERK_SECRET_KEY: test-clerk-secret
          CLERK_PUBLISHABLE_KEY: test-clerk-pub
        run: |
          pytest --maxfail=1 --disable-warnings -q --cov=app --cov-report=term-missing --cov-fail-under=90

  postgres-migrations:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test" \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Prepare Alembic env
        env:
          DATABASE_URL: postgresql+psycopg2://test:test@localhost:5432/testdb
        run: |
          sed -n '1,200p' alembic.ini | cat
          echo "Using DB: $DATABASE_URL"

      - name: Run migrations
        env:
          DATABASE_URL: postgresql+psycopg2://test:test@localhost:5432/testdb
        run: |
          alembic upgrade head

      - name: Smoke check schema
        env:
          DATABASE_URL: postgresql+psycopg2://test:test@localhost:5432/testdb
        run: |
          python - <<'PY'
          from sqlalchemy import create_engine, text
          import os
          url = os.environ['DATABASE_URL']
          e = create_engine(url)
          with e.connect() as c:
              c.execute(text('select 1'))
          print('schema ok')
          PY
