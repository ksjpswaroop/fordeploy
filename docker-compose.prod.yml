version: "3.9"

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: ai_recruitment_db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-recruitment}
      - POSTGRES_USER=${POSTGRES_USER:-recruit}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ai_recruitment_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai_recruitment_backend
    environment:
      # Core Configuration
      - PORT=8080
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=info
      - SECRET_KEY=${SECRET_KEY}
      
      # Database Configuration
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER:-recruit}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-recruitment}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      
      # Redis Configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Authentication
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_JWT_SECRET_BASE64=${CLERK_JWT_SECRET_BASE64}
      
      # External APIs
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - APIFY_API_TOKEN=${APIFY_API_TOKEN}
      
      # Email Configuration
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      
      # CORS Configuration
      - CORS_ORIGINS=${CORS_ORIGINS:-https://yourdomain.com}
      
      # File Storage
      - UPLOAD_DIR=/app/uploads
      
      # Disable dev auth in production
      - DEV_BEARER_TOKEN=
      
    volumes:
      - ./uploads:/app/uploads
      - ./generated_docs:/app/generated_docs
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["sh", "-c", "./scripts/prestart.sh && gunicorn -c gunicorn_conf.py app.main:app"]
    restart: unless-stopped

  # Next.js Frontend
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai_recruitment_frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=/api
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_JWT_SECRET_BASE64=${CLERK_JWT_SECRET_BASE64}
      - NEXT_SHARP_SKIP_GLOBAL_LIBVIPS=true
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.27-alpine
    container_name: ai_recruitment_nginx
    depends_on:
      - api
      - web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  dbdata:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
