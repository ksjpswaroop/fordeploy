services:
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-recruitment}
      - POSTGRES_USER=${POSTGRES_USER:-recruit}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-change-me}
    volumes:
      - dbdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - PORT=8080
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER:-recruit}:${POSTGRES_PASSWORD:-change-me}@db:5432/${POSTGRES_DB:-recruitment}
      - SECRET_KEY=${SECRET_KEY:-please-change}
      - DEV_BEARER_TOKEN=
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_JWT_SECRET_BASE64=${CLERK_JWT_SECRET_BASE64}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health >/dev/null || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    command: ["sh", "-c", "./scripts/prestart.sh && gunicorn -c gunicorn_conf.py app.main:app"]
    restart: unless-stopped

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=/api
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - CLERK_JWT_SECRET_BASE64=${CLERK_JWT_SECRET_BASE64}
  - NEXT_SHARP_SKIP_GLOBAL_LIBVIPS=true
  - API_INTERNAL_BASE_URL=http://api:8080/api
    depends_on:
      - api
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - api
      - web
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped

volumes:
  dbdata:
